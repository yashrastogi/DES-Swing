
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.UIManager;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author niit
 */
public class Encrypt extends javax.swing.JFrame {

    /**
     * Creates new form Encrypt
     */
    public Encrypt() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("DES Encryptor");

        jLabel1.setText("Text:");

        jTextField1.setText("HelloWor");
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jButton1.setText("Encrypt");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel2.setText("Key:");

        jTextField2.setText("Testing1");
        jTextField2.setToolTipText("");
        jTextField2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField2ActionPerformed(evt);
            }
        });

        jLabel3.setText("Output:");

        jTextField3.setEditable(false);
        jTextField3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jTextField1, javax.swing.GroupLayout.DEFAULT_SIZE, 173, Short.MAX_VALUE)
                            .addComponent(jTextField2)
                            .addComponent(jTextField3)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 317, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jTextField2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField2ActionPerformed

    private void jTextField3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField3ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        int round = 1;
        int IP[] = {58, 50, 42, 34, 26, 18, 10, 2,60, 52, 44, 36, 28, 20 ,12, 4, 
                    62, 54, 46, 38, 30, 22, 14, 6, 64, 56, 48, 40, 32, 24, 16, 8,
                    57, 49, 41, 33, 25, 17, 9, 1, 59, 51, 43, 35, 27, 19, 11, 3, 
                    61, 53, 45, 37, 29, 21, 13, 5, 63, 55, 47, 39, 31, 23, 15, 7};
        int IP_Inverse[] = {40, 8, 48, 16, 56, 24, 64,32, 39, 7, 47, 15, 55, 23, 63, 31,
                            38, 6, 46, 14, 54, 22, 62, 30,37, 5, 45, 13,53, 21, 61, 29,
                            36, 4, 44, 12, 52, 20, 60, 28,35, 3, 43, 11, 51, 19, 59, 27,
                            34, 2, 42, 10, 50, 18, 58, 26,33, 1, 41, 9, 49, 17, 57, 25};
        int E[] = {32, 1, 2, 3, 4, 5, 4, 5, 6, 7, 8, 9, 
                    8, 9, 10, 11, 12, 13, 12, 13, 14, 15, 16, 17, 
                   16, 17, 18, 19, 20, 21, 20, 21, 22, 23, 24, 25, 
                   24, 25, 26, 27, 28, 29, 28, 29, 30, 31, 32 ,1}; /*  */
	int P[] = {16, 7, 20, 21, 29, 12, 28, 17, 
                    1, 15, 23, 26, 5, 18, 31, 10, 
                    2, 8, 24, 14, 32, 27, 3, 9, 
                   19, 13, 30, 6, 22, 11, 4, 25}; /*  */
	int PC1[] = {57, 49, 41, 33, 25, 17, 9, 1, 58, 50, 42, 34, 26, 18, 
                     10, 2, 59, 51, 43, 35, 27, 19, 11, 3, 60, 52, 44, 36, 
                     63, 55, 47, 39, 31, 23, 15, 7, 62, 54, 46, 38, 30, 22, 
                     14, 6, 61, 53, 45, 37, 29, 21, 13, 5, 28, 20, 12, 4}; /*  */
	int PC2[] = {14, 17, 11, 24, 1, 5, 3, 28, 15, 6, 21, 10, 
                     23, 19, 12 ,4, 26, 8, 16, 7, 27, 20, 13, 2, 
                     41, 52, 31, 37, 47, 55, 30, 40, 51, 45, 33, 48, 
                     44, 49, 39, 56, 34, 53, 46, 42, 50, 36, 29, 32}; /*  */
	int S1[][] = {{14, 4, 13, 1, 2, 15, 11, 8, 3, 10, 6, 12, 5, 9, 0, 7}, 
                    {0, 15, 7, 4, 14, 2, 13, 1, 10, 6, 12, 11, 9, 5, 3, 8}, 
                    {4, 1, 14, 8, 13, 6, 2, 11, 15, 12, 9, 7, 3, 10, 5, 0}, 
                    {15, 12, 8, 2, 4, 9, 1, 7, 5, 11, 3, 14, 10, 0, 6, 13}}; /* */
	int S2[][] = {{15, 1, 8, 14, 6, 11, 3, 4, 9, 7, 2, 13, 12, 0, 5, 10}, 
                      {3, 13, 4, 7, 15, 2, 8, 14, 12, 0, 1, 10, 6, 9, 11, 5}, 
                      {0, 14, 7, 11, 10, 4, 13, 1, 5, 8, 12, 6, 9, 3, 2, 15}, 
                      {13, 8, 10, 1, 3, 15, 4, 2, 11, 6, 7, 12, 0, 5, 14, 9}}; /* */
	int S3[][] = {{10, 0, 9, 14, 6, 3, 15, 5, 1, 13, 12, 7, 11, 4, 2, 8}, 
                    {13, 7, 0, 9, 3, 4, 6, 10, 2, 8, 5, 14, 12, 11, 15, 1}, 
                    {13, 6, 4, 9, 8, 15, 3, 0, 11, 1, 2, 12, 5, 10, 14, 7}, 
                    {1, 10, 13, 0, 6, 9, 8, 7, 4, 15, 14, 3, 11, 5, 2, 12}}; /* */
	int S4[][] = {{7, 13, 14, 3, 0, 6, 9, 10, 1, 2, 8, 5, 11, 12, 4, 15}, 
                    {13, 8, 11, 5, 6, 15, 0, 3, 4, 7, 2, 12, 1, 10, 14, 9}, 
                    {10, 6, 9, 0, 12, 11, 7, 13, 15, 1, 3, 14, 5, 2, 8, 4}, 
                    {3, 15, 0, 6, 10, 1, 13, 8, 9, 4, 5, 11, 12, 7, 2, 14}}; /* */
	int S5[][] = {{2, 12, 4, 1, 7, 10, 11, 6, 8, 5, 3, 15, 13, 0, 14, 9}, 
                    {14, 11, 2, 12, 4, 7, 13, 1, 5, 0, 15, 10, 3, 9, 8, 6}, 
                    {4, 2, 1, 11, 10, 13, 7, 8, 15, 9, 12, 5, 6, 3, 0, 14}, 
                    {11, 8, 12, 7, 1, 14, 2, 13, 6, 15, 0, 9, 10, 4, 5, 3}}; /* */
	int S6[][] = {{12, 1, 10, 15, 9, 2, 6, 8, 0, 13, 3, 4, 14, 7, 5, 11}, 
                    {10, 15, 4, 2, 7, 12, 9, 5, 6, 1, 13, 14, 0, 11, 3, 8}, 
                    {9, 14, 15, 5, 2, 8, 12, 3, 7, 0, 4, 10, 1, 13, 11, 6}, 
                    {4, 3, 2, 12, 9, 5, 15, 10, 11, 14, 1, 7, 6, 0, 8, 13}}; /* */
	int S7[][] = {{4, 11, 2, 14, 15, 0, 8, 13, 3, 12, 9, 7, 5, 10, 6, 1}, 
                    {13, 0, 11, 7, 4, 9, 1, 10, 14, 3, 5, 12, 2, 15, 8, 6}, 
                    {1, 4, 11, 13, 12, 3, 7, 14, 10, 15, 6, 8, 0, 5, 9, 2}, 
                    {6, 11, 13, 8, 1, 4, 10, 7, 9, 5, 0, 15, 14, 2, 3, 12}}; /* */
	int S8[][] = {{13, 2, 8, 4, 6, 15, 11, 1, 10, 9, 3, 14, 5, 0, 12, 7}, 
                    {1, 15, 13, 8, 10, 3, 7, 4, 12, 5, 6, 11, 0, 14, 9, 2}, 
                    {7, 11, 4, 1, 9, 12, 14, 2, 0, 6, 10, 13, 15, 3, 5, 8}, 
                    {2, 1, 14, 7, 4, 10, 8, 13, 15, 12, 9, 0, 3, 5, 6, 11}}; /* */
        
        String input = jTextField1.getText();
        String key = jTextField2.getText();
        StringBuilder inputbin = new StringBuilder();
        // Convert text to byte to binary
        byte[] bytes = input.getBytes();
        for(byte b: bytes) {
            int temp = b;
            // Test highest bit, if set then append 1 else 0... then left shift
            for(int i=0; i<8; i++) {
                inputbin.append((temp & 128) == 0 ? 0 : 1);
                temp <<= 1;
            }
        }
        StringBuilder keybin = new StringBuilder();
        bytes = key.getBytes();
        for(byte b: bytes) {
            int temp = b;
            // Test highest bit, if set then append 1 else 0... then left shift
            for(int i=0; i<8; i++) {
                keybin.append((temp & 128) == 0 ? 0 : 1);
                temp <<= 1;
            }
        }
        
        if(inputbin.length()>64 || keybin.length()>64) {
            JOptionPane.showMessageDialog(rootPane, "Please enter 8 characters of data only");
            this.dispose();
            JFrame encrypt = new Encrypt();
            encrypt.setVisible(true);
            return;
        }
        
        if(inputbin.length()<64 || keybin.length()<64) {
            for(int i=inputbin.length(); i<64; i++) {
               // inputbin.reverse();
                inputbin.append("0");
               // inputbin.reverse();
            }
            for(int i=keybin.length(); i<64; i++) {
              //  keybin.reverse();
                keybin.append("0");
              //  keybin.reverse();
            }
        }
        System.out.println("\n\n\n\n\nInput converted to "+inputbin+"\nLength of this is: "+inputbin.length());
        System.out.println("Key converted to   "+keybin+"\nLength of this is: "+keybin.length());

        // perform initial permutation
        int[] ipout = new int[64];
        for(int i=0; i<64; i++) {
            ipout[IP[i]-1] = Character.getNumericValue(inputbin.charAt(i));
        }
        /* commentable */
        System.out.println("Initial permutation output:");
        for(int i: ipout) {
            System.out.print(i);   
        }
        /* /commentable */
        int[] lefthalfbeforein = new int[32];
        int[] righthalfbeforein = new int[32];
        for(int i=0; i<32; i++) {
            lefthalfbeforein[i] = ipout[i];
            righthalfbeforein[i] = ipout[i+32];
        }
        /* commentable */
        System.out.println("\n\nLeft halfbeforein: ");
        for(int i: lefthalfbeforein) {
            System.out.print(i);   
        }
        System.out.println("\n\nRight halfbeforein: ");
        for(int i: righthalfbeforein) {
            System.out.print(i);   
        }
        /* /commentable */
        
        // copy right half 32 bits to left half
        int[] lefthalfafterin = righthalfbeforein;
        
        // perform expansion permutation of right half
        int[] expperm = new int[48];
        for(int i=0; i<48; i++) {
            expperm[i] = righthalfbeforein[E[i]-1]; 
        }
         /* commentable */
        System.out.println("\n\nExpansion permutation output:");
        for(int i: expperm) {
            System.out.print(i);   
        }
        System.out.println();
        /* /commentable */
        // Done till expansion permutation, key part begins
        // PC1
        int[] pc1out = new int[56];
        for(int i=0; i<56; i++) {
            pc1out[i] = Character.getNumericValue(keybin.charAt(PC1[i]-1));
        }
         /* commentable */
        System.out.println("\n\nPC1 output (Length: "+pc1out.length+"):");
        for(int i: pc1out) {
            System.out.print(i);   
        }
        System.out.println();
        /* /commentable */
        int[] pc1lefthalfbefore = new int[28];
        int[] pc1righthalfbefore = new int[28];
        for (int i=0; i<28; i++) {
            pc1lefthalfbefore[i] = pc1out[i];
            pc1righthalfbefore[i] = pc1out[i+28];
        }
        /* commentable */
        System.out.println("\n\nLeft pc1halfbefore: ");
        for(int i: pc1lefthalfbefore) {
            System.out.print(i);   
        }
        System.out.println("\n\nRight pc1halfbefore: ");
        for(int i: pc1righthalfbefore) {
            System.out.print(i);   
        }
        /* /commentable */
        // left circular shift by 1 bit for 1st round
        for(int i=0; i<round; i++) {
            pc1lefthalfbefore = Functions.shiftCircularLeft(pc1lefthalfbefore);
            pc1righthalfbefore = Functions.shiftCircularLeft(pc1righthalfbefore);
        }
        /* commentable */
        System.out.println("\n\nLeft pc1halfbefore shifted: ");
        for(int i: pc1lefthalfbefore) {
            System.out.print(i);   
        }
        System.out.println("\n\nRight pc1halfbefore shifted: ");
        for(int i: pc1righthalfbefore) {
            System.out.print(i);   
        }
        /* /commentable */
        
        int[] pc1lefthalfafter = pc1lefthalfbefore;
        int[] pc1righthalfafter = pc1righthalfbefore;
        
        // Permuted Choice 2
        int[] pc2out = new int[48];
        for(int i=0; i<48; i++) {
            //System.out.println("PC2["+i+"]: "+PC2[i]);
            if(PC2[i]>28) {
                pc2out[i] = pc1righthalfbefore[PC2[i]-28-1];
            } else {
                pc2out[i] = pc1lefthalfbefore[PC2[i]-1];
            }
        }
         /* commentable */
        System.out.println("\n\nPC2 output (Length: "+pc2out.length+"):");
        for(int i: pc2out) {
            System.out.print(i);   
        }
        /* /commentable */
        
        // XOR EP output and PC2 output
        int[] xoroutput1 = new int[48];
        
        for(int i=0; i<48; i++) {
            xoroutput1[i] = expperm[i] | pc2out[i];
        }
         /* commentable */
        System.out.println("\n\nXOR1 output (Length: "+xoroutput1.length+"):");
        for(int i: xoroutput1) {
            System.out.print(i);   
        }
        /* /commentable */
        
        // S-Box
      
        System.out.println();
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Encrypt.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Encrypt.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Encrypt.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Encrypt.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Encrypt().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    // End of variables declaration//GEN-END:variables
}
