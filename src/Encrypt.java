
import java.math.BigInteger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.UIManager;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author niit
 */
public class Encrypt extends javax.swing.JFrame {

    /**
     * Creates new form Encrypt
     */
    public Encrypt() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("DES Encryptor");

        jLabel1.setText("Text (Hex):");

        jTextField1.setText("02468aceeca86420");
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jButton1.setText("Encrypt");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel2.setText("Key (Hex):");

        jTextField2.setText("0f1571c947d9e859");
        jTextField2.setToolTipText("");
        jTextField2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField2ActionPerformed(evt);
            }
        });

        jLabel3.setText("Output:");

        jTextField3.setEditable(false);
        jTextField3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jTextField1, javax.swing.GroupLayout.DEFAULT_SIZE, 173, Short.MAX_VALUE)
                            .addComponent(jTextField2)
                            .addComponent(jTextField3)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 317, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jTextField2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField2ActionPerformed

    private void jTextField3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField3ActionPerformed
        
    }//GEN-LAST:event_jTextField3ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        int IP[] = {58, 50, 42, 34, 26, 18, 10, 2,60, 52, 44, 36, 28, 20 ,12, 4, 
                    62, 54, 46, 38, 30, 22, 14, 6, 64, 56, 48, 40, 32, 24, 16, 8,
                    57, 49, 41, 33, 25, 17, 9, 1, 59, 51, 43, 35, 27, 19, 11, 3, 
                    61, 53, 45, 37, 29, 21, 13, 5, 63, 55, 47, 39, 31, 23, 15, 7};

	int PC1[] = {57, 49, 41, 33, 25, 17, 9, 1, 58, 50, 42, 34, 26, 18, 
                     10, 2, 59, 51, 43, 35, 27, 19, 11, 3, 60, 52, 44, 36, 
                     63, 55, 47, 39, 31, 23, 15, 7, 62, 54, 46, 38, 30, 22, 
                     14, 6, 61, 53, 45, 37, 29, 21, 13, 5, 28, 20, 12, 4};
	
//        String input = jTextField1.getText();
//        String key = jTextField2.getText();
        
        BigInteger input = new BigInteger(jTextField1.getText(), 16);
        BigInteger key = new BigInteger(jTextField2.getText(), 16);
        
        StringBuilder inputbin = new StringBuilder(input.toString(2));
        StringBuilder keybin = new StringBuilder(key.toString(2));
//        StringBuilder inputbin = new StringBuilder();
//        // Convert text to byte to binary
//        byte[] bytes = input.getBytes();
//        for(byte b: bytes) {
//            int temp = b;
//            // Test highest bit, if set then append 1 else 0... then left shift
//            for(int i=0; i<8; i++) {
//                inputbin.append((temp & 128) == 0 ? 0 : 1);
//                temp <<= 1;
//            }
//        }
//        StringBuilder keybin = new StringBuilder();
//        bytes = key.getBytes();
//        for(byte b: bytes) {
//            int temp = b;
//            // Test highest bit, if set then append 1 else 0... then left shift
//            for(int i=0; i<8; i++) {
//                keybin.append((temp & 128) == 0 ? 0 : 1);
//                temp <<= 1;
//            }
//        }
        
        if(inputbin.length()>64 || keybin.length()>64) {
            JOptionPane.showMessageDialog(rootPane, "Please enter 8 bytes of data only");
            this.dispose();
            JFrame encrypt = new Encrypt();
            encrypt.setVisible(true);
            return;
        }
        
        if(inputbin.length()<64 || keybin.length()<64) {
            for(int i=inputbin.length(); i<64; i++) {
               // inputbin.reverse();
                inputbin.append("0");
               // inputbin.reverse();
            }
            for(int i=keybin.length(); i<64; i++) {
              //  keybin.reverse();
                keybin.append("0");
              //  keybin.reverse();
            }
        }
        System.out.println("\n\n\n\n\nInput converted to "+inputbin+"\nLength of this is: "+inputbin.length());
        System.out.println("Key converted to   "+keybin+"\nLength of this is: "+keybin.length());

        // perform initial permutation
        int[] ipout = new int[64];
        for(int i=0; i<64; i++) {
            ipout[IP[i]-1] = Character.getNumericValue(inputbin.charAt(i));
        }
//        /* commentable */
//        System.out.println("Initial permutation output:");
//        for(int i: ipout) {
//            System.out.print(i);   
//        }
//        /* /commentable */
        
        // PC1
        int[] pc1out = new int[56];
        for(int i=0; i<56; i++) {
            pc1out[i] = Character.getNumericValue(keybin.charAt(PC1[i]-1));
        }
//         /* commentable */
//        System.out.println("\n\nPC1 output (Length: "+pc1out.length+"):");
//        for(int i: pc1out) {
//            System.out.print(i);   
//        }
//         /* /commentable */
        
        int output[][] = null;
        for(int round=1; round<=16; round++) {
            if(round == 1) {
                output = SingleRoundEncryption.firstRoundDES(round, pc1out, ipout);
            }
            else {
                output = SingleRoundEncryption.nRoundDES(round, output);
            }
            
            int cipherTextLen = output[0].length+output[1].length;
            int keyLen = output[2].length+output[3].length;
            
//            System.out.println("\n\nOutput of Round "+round+":\nCipherText ("+cipherTextLen+"):");
//            for(int i: output[0]) {
//                System.out.print(i);
//            }
//            System.out.print(" ");
//            for(int i: output[1]) {
//                System.out.print(i);
//            } 
//            System.out.println("\nKey ("+keyLen+"):");
//            for(int i: output[2]) {
//                System.out.print(i);
//            }
//            System.out.print(" ");
//            for(int i: output[3]) {
//                System.out.print(i);
//            } 
        }
        
        int binOutput[] = SingleRoundEncryption.finalRoundDES(output);
       
        StringBuilder binOut = new StringBuilder();
        for(int i=0; i<binOutput.length; i++) {
            binOut.append(binOutput[i]);
        }
        BigInteger tempout = new BigInteger(""+binOut, 2);
        jTextField3.setText(tempout.toString(16));
        System.out.println();
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Encrypt.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Encrypt.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Encrypt.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Encrypt.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Encrypt().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    // End of variables declaration//GEN-END:variables
}
